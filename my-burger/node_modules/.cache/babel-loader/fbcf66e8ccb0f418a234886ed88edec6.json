{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\user\\\\Desktop\\\\New folder\\\\React-activities\\\\my-burger\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\New folder\\\\React-activities\\\\my-burger\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\New folder\\\\React-activities\\\\my-burger\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\New folder\\\\React-activities\\\\my-burger\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\user\\\\Desktop\\\\New folder\\\\React-activities\\\\my-burger\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\New folder\\\\React-activities\\\\my-burger\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport axios from '../../../axios-orders';\nimport * as actions from '../../../store/actions/index';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\n\nvar ContactData = /*#__PURE__*/function (_Component) {\n  _inherits(ContactData, _Component);\n\n  var _super = _createSuper(ContactData);\n\n  function ContactData() {\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zip: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minlength: 5,\n            maxLength: 10\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: '',\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    _this.orderHandler = function (event) {\n      event.preventDefault();\n      var formData = {};\n\n      for (var orderDataIdentifier in _this.state.orderForm) {\n        formData[orderDataIdentifier] = _this.state.orderForm[orderDataIdentifier].value;\n      }\n\n      var order = {\n        ingredients: _this.props.ingr,\n        price: _this.props.totPrc,\n        orderData: formData\n      };\n\n      _this.props.onOrderBurger(order);\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.chechValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var formIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[formIdentifier].valid && formIsValid;\n      }\n\n      _this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n\n      console.log(updatedFormElement.valid);\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"chechValidity\",\n    value: function chechValidity(value, rules) {\n      var isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minlength) {\n        isValid = value.length >= rules.minlength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }\n      }, formElementsArray.map(function (formElement) {\n        return /*#__PURE__*/React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }\n        });\n      }), /*#__PURE__*/React.createElement(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }\n      }, \"Order\"));\n\n      if (this.state.loading) {\n        form = /*#__PURE__*/React.createElement(Spinner, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 19\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.ContactData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }\n      }, \"Enter your contact data \"), form);\n    }\n  }]);\n\n  return ContactData;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    ingr: state.ingredients,\n    totPrc: state.totalPrice\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  onOrderBurger: (function (orderData) {\n    return dispatch(actions.purchaseBurgerStart(orderData));\n  });\n};\n\nexport default connect(mapStateToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["C:/Users/user/Desktop/New folder/React-activities/my-burger/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Button","classes","Spinner","Input","axios","actions","withErrorHandler","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zip","minlength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","loading","orderHandler","event","preventDefault","formData","orderDataIdentifier","order","ingredients","props","ingr","price","totPrc","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","chechValidity","formIdentifier","setState","console","log","rules","isValid","trim","length","formElementsArray","key","push","id","config","form","map","formElement","mapStateToProps","totalPrice","mapDispatchToProps","dispatch","purchaseBurgerStart"],"mappings":"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","sourcesContent":["import React , {Component} from 'react'\r\nimport {connect} from 'react-redux';\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport classes from './ContactData.module.css'\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport Input from '../../../components/UI/Input/Input'\r\nimport axios from '../../../axios-orders';\r\nimport * as actions from '../../../store/actions/index'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm:{\r\n            name:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Your name'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            street:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Street'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            zip:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'ZIP Code'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required: true,\r\n                    minlength:5,\r\n                    maxLength:10\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            country:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Country'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            email:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your mail'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            deliveryMethod: {\r\n                elementType:'select',\r\n                elementConfig:{\r\n                    options:[\r\n                        {value:'fastest',displayValue:'Fastest'},\r\n                        {value:'cheapest',displayValue:'Cheapest'}\r\n                    ]\r\n                },\r\n                value:'',\r\n                validation:{},\r\n                valid:true\r\n            },\r\n        },\r\n        formIsValid:false,\r\n        loading:false\r\n\r\n    }\r\n\r\n\r\n    chechValidity(value,rules){\r\n        let isValid = true;\r\n        if(rules.required){\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if(rules.minlength){\r\n            isValid = value.length >= rules.minlength && isValid;\r\n        }\r\n\r\n        if(rules.maxLength){\r\n            isValid = value.length <= rules.maxLength && isValid;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    orderHandler = (event) =>{\r\n        event.preventDefault()\r\n    const formData = {}\r\n    for(let orderDataIdentifier in this.state.orderForm){\r\n        formData[orderDataIdentifier] = this.state.orderForm[orderDataIdentifier].value\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ingr,\r\n      price: this.props.totPrc,\r\n      orderData:formData\r\n    }\r\n    this.props.onOrderBurger(order)\r\n}\r\n    \r\n\r\n    inputChangedHandler = (event,inputIdentifier) => {\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm\r\n        }\r\n        const updatedFormElement = {\r\n            ...updatedOrderForm[inputIdentifier]\r\n        }\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = this.chechValidity(updatedFormElement.value,updatedFormElement.validation)\r\n        updatedFormElement.touched = true;\r\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n        let formIsValid = true;\r\n        for(let formIdentifier in updatedOrderForm){\r\n            formIsValid = updatedOrderForm[formIdentifier].valid && formIsValid;\r\n        }\r\n        this.setState({orderForm:updatedOrderForm,formIsValid:formIsValid})\r\n        console.log(updatedFormElement.valid)\r\n    }\r\n\r\n    render(){\r\n        const formElementsArray = [];\r\n        for(let key in this.state.orderForm){\r\n            formElementsArray.push({\r\n                id:key,\r\n                config:this.state.orderForm[key]\r\n            })\r\n\r\n        }\r\n\r\n        let form = (<form onSubmit={this.orderHandler}>\r\n            {formElementsArray.map(formElement=>(\r\n                <Input key={formElement.id}\r\n                       elementType={formElement.config.elementType}\r\n                       elementConfig={formElement.config.elementConfig}\r\n                       value={formElement.config.value}\r\n                       invalid ={!formElement.config.valid}\r\n                       shouldValidate={formElement.config.validation}\r\n                       touched = {formElement.config.touched}\r\n                       changed={(event)=>this.inputChangedHandler(event,formElement.id)} />\r\n            ))}\r\n            <Button btnType = 'Success' disabled={!this.state.formIsValid} >Order</Button>\r\n        </form>);\r\n\r\n        if(this.state.loading){\r\n           form = <Spinner />\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h1>Enter your contact data </h1>\r\n                {form}\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingr:state.ingredients,\r\n        totPrc:state.totalPrice\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    onOrderBurger : (orderData) => dispatch(actions.purchaseBurgerStart(orderData))\r\n}\r\n\r\nexport default connect(mapStateToProps)(withErrorHandler(ContactData,axios))"]},"metadata":{},"sourceType":"module"}